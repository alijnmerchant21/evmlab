[DEFAULT]

fork_config = ConstantinopleFix
clients = geth,parity

artefacts = ~/tmp/evmlab/artefacts/
tests_path = /datadrive/evmlabtemp/

geth.docker_name     = ethereum/client-go:alltools-latest
cpp.docker_name     = holiman/testeth
testeth.docker_name = holiman/testeth
parity.docker_name  = holiman/parityvm
hera.docker_name = holiman/hera

#py.docker_name     = cdetrio/pyethereum
#cpp.docker_name    = cdetrio/std-cpp-ethereum
#parity.docker_name = cdetrio/std-parity
#geth.docker_name   = cdetrio/std-geth
#testeth.docker_name = cdetrio/testeth
#js.docker_name = jwasinger/ethereumjs-vm


[martin]

geth.docker_name  = ethereum/client-go:alltools-latest
cpp.docker_name   = holiman/testeth
testeth.docker_name   = holiman/testeth

#testeth.docker_name = cdetrio/testeth


[statetest]
info.comment = evmlab statetest 

#env.difficulty = 0x20000
#env.gaslimit = 0x1312D00
#env.number = 1
#env.timestamp = 1000
#env.coinbase = 0x...address
#env.previousHash = 0x..address

# max and min random storage slots to generate for prestates
#prestate.storage.random.slots.min = 0
#prestate.storage.random.slots.max = 2

#prestate.random.code.length.min = 50
#prestate.random.code.length.max = 500

## performance: prestate regeneration behavior
# renew.every.x.rounds  ... 1 = always
# renew.limit.per.round ... max number of existing prestates to regenerate in a round. 0 = all
#prestate.txto.renew.every.x.rounds = 1
#prestate.other.renew.every.x.rounds = 1
#prestate.other.renew.limit.per.round = 0

# transaction gas limit
#transaction.gaslimit.random.min = 476000
#transaction.value.random.min = 0
#transaction.value.random.max = 16777216



[codegen]
# Codegenerator settings
engine.RndCodeBytes.enabled = true
engine.RndCodeInstr.enabled = true
engine.RndCodeSmart2.enabled = true

## probabilities for each codegen to be chosen
engine.RndCodeBytes.weight = 5
engine.RndCodeInstr.weight = 25
engine.RndCodeSmart2.weight = 70

# [[RndCodeInstr]]
# 99.0%
engine.RndCodeInstr.smartCodeProbability.p = 990
## this is the default length to be generated. might be overriden by prestate.random.code.length.min/max
#engine.RndCodeInstr.default.length = 50

# [[RndCodeSmart2]]
# special settings for
engine.RndCodeSmart2.min_gas = 100
#engine.RndCodeSmart2.generator = RndCodeGenGauss
#engine.RndCodeSmart2.distribution = EVM_CATEGORY

# fix code length to a specific value. otherwise take random length value from distribution
#engine.RndCodeSmart2.length = 800

## probabilities
# 0 = disabled
# values are x/1000. i.e. 99 ^== 9.9 %
engine.RndCodeSmart2.fixes.fix_stack_arguments.p = 995
engine.RndCodeSmart2.fixes.fix_stack_balance.p = 950
# not yet configurable
# engine.RndCodeSmart2.fixes.fix_jumps.p = 995

## Mutation probabilities
### instruction mutator
engine.RndCodeSmart2.mutate.instructions.p = 10
# random(1, max_amount)
engine.RndCodeSmart2.mutate.instructions.max_amount = 3

engine.RndCodeSmart2.mutate.instructions.randomize_operand.weight = 60
engine.RndCodeSmart2.mutate.instructions.drop_item.weight = 10
engine.RndCodeSmart2.mutate.instructions.dup_instruction.weight = 20
engine.RndCodeSmart2.mutate.instructions.insert_random_instructions.weight = 10

# byte mutator
engine.RndCodeSmart2.mutate.bytecode.p = 1
# random(1, max_amount)
engine.RndCodeSmart2.mutate.bytecode.max_amount = 3

engine.RndCodeSmart2.mutate.bytecode.randomize_operand.weight = 50
engine.RndCodeSmart2.mutate.bytecode.insert_random_bytes.weight = 10
engine.RndCodeSmart2.mutate.bytecode.drop_byte.weight = 20
engine.RndCodeSmart2.mutate.bytecode.switch_random.weight = 20